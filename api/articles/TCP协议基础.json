{"title":"TCP协议基础","uid":"d4ce15d0e6461839b152fd67cbb07148","slug":"TCP协议基础","date":"2025-10-16T09:47:31.000Z","updated":"2025-10-17T16:43:02.559Z","comments":true,"path":"api/articles/TCP协议基础.json","keywords":["Wclxd","blog","personal"],"cover":null,"content":"<h3 id=\"什么是TCP协议\"><a href=\"#什么是TCP协议\" class=\"headerlink\" title=\"什么是TCP协议\"></a>什么是TCP协议</h3><h2 id=\"（Transmission-Control-Protocol，传输控制协议）是一种面向连接、可靠的传输层协议，其核心是通过-“标志位控制”“序号与确认机制”-实现数据的有序、无差错传输。以下从-“TCP-协议基础结构”“发包与解包过程”“基于-TCP-的常见扫描原理”-三个维度展开说明：\"><a href=\"#（Transmission-Control-Protocol，传输控制协议）是一种面向连接、可靠的传输层协议，其核心是通过-“标志位控制”“序号与确认机制”-实现数据的有序、无差错传输。以下从-“TCP-协议基础结构”“发包与解包过程”“基于-TCP-的常见扫描原理”-三个维度展开说明：\" class=\"headerlink\" title=\"（Transmission Control Protocol，传输控制协议）是一种面向连接、可靠的传输层协议，其核心是通过 “标志位控制”“序号与确认机制” 实现数据的有序、无差错传输。以下从 “TCP 协议基础结构”“发包与解包过程”“基于 TCP 的常见扫描原理” 三个维度展开说明：\"></a>（Transmission Control Protocol，传输控制协议）是一种面向连接、可靠的传输层协议，其核心是通过 “标志位控制”“序号与确认机制” 实现数据的有序、无差错传输。以下从 “TCP 协议基础结构”“发包与解包过程”“基于 TCP 的常见扫描原理” 三个维度展开说明：</h2><h4 id=\"一、TCP-协议基础：首部结构与核心字段\"><a href=\"#一、TCP-协议基础：首部结构与核心字段\" class=\"headerlink\" title=\"一、TCP 协议基础：首部结构与核心字段\"></a>一、TCP 协议基础：首部结构与核心字段</h4><p>TCP 数据包的 “首部”（Header）包含控制通信的关键信息，固定部分 20 字节，可选部分最多 40 字节，核心字段如下（与发包、扫描相关的重点）：<br>字段\t作用<br>源端口 &#x2F; 目的端口\t标识发送端和接收端的应用程序（如 80 端口对应 HTTP，443 对应 HTTPS）。<br>序号（Sequence Number）\t标记数据包的字节顺序，确保接收端按序重组（每发送 1 字节，序号 + 1）。<br>确认号（Acknowledgment Number）\t期望收到的下一个字节序号（仅当 ACK 标志位为 1 时有效），用于确认已收到数据。<br>数据偏移\t指示 TCP 首部长度（单位：32 位字，即 4 字节），区分首部和数据部分。<br>标志位（Flags）\t6 个 1 位标志位，控制连接状态：</p>\n<ul>\n<li>SYN：发起连接请求；</li>\n<li>ACK：确认收到数据；</li>\n<li>FIN：请求关闭连接；</li>\n<li>RST：强制重置连接；</li>\n<li>PSH：要求立即推送数据给应用层；</li>\n<li>URG：标记紧急数据。<br>窗口大小\t接收端的缓冲区大小，用于流量控制（告诉发送端 “最多还能接收多少字节”）。<br>校验和\t用于检测数据包在传输中是否损坏（首部 + 数据均参与计算）。</li>\n</ul>\n<hr>\n<h4 id=\"二、TCP-的发包与解包过程\"><a href=\"#二、TCP-的发包与解包过程\" class=\"headerlink\" title=\"二、TCP 的发包与解包过程\"></a>二、TCP 的发包与解包过程</h4><p>TCP 的 “发包” 指发送端封装数据为 TCP 包并发送，“解包” 指接收端解析 TCP 包并提取数据，过程依赖操作系统的 TCP&#x2F;IP 协议栈（如 Linux 的tcp_v4_sendmsg、tcp_v4_rcv函数）：</p>\n<ol>\n<li>发包过程（发送端）<br>步骤 1：应用层数据传递应用程序（如浏览器）通过socket接口向 TCP 层发送数据（例如 HTTP 请求）。<br>步骤 2：TCP 层封装首部TCP 协议栈为数据添加首部：<br>填充源端口（随机或指定）、目的端口（目标服务端口）；<br>分配序号（初始序号 ISN 由系统随机生成，后续按字节递增）；<br>根据通信状态设置标志位（如首次连接设 SYN&#x3D;1）；<br>计算校验和（确保数据完整性）。<br>步骤 3：IP 层与链路层封装TCP 包被传递到 IP 层，添加 IP 首部（源 IP、目的 IP 等），再传递到链路层（如以太网）添加 MAC 首部，最终通过物理层（网线、无线）发送。</li>\n<li>解包过程（接收端）<br>步骤 1：链路层与 IP 层解析接收端链路层接收数据包，校验 MAC 地址匹配后剥离 MAC 首部，传递给 IP 层；IP 层校验 IP 地址和校验和，剥离 IP 首部，将 TCP 包传递给 TCP 层。<br>步骤 2：TCP 层校验与处理<br>校验 TCP 校验和，若损坏则丢弃；<br>检查端口号，将包转发到对应应用程序的socket；<br>根据标志位和序号处理：<br>若为 SYN 包（连接请求），回复 SYN+ACK 包（确认连接）；<br>若为数据 + ACK 包，检查序号是否连续，重组数据后通知应用层，并回复 ACK 确认；<br>若为 FIN 包（关闭请求），回复 ACK 确认，随后发起自己的 FIN 包。<br>步骤 3：应用层接收数据TCP 层将重组后的完整数据传递给应用层（如浏览器解析 HTTP 响应）。</li>\n</ol>\n<hr>\n<h4 id=\"三、基于-TCP-标志位的常见扫描原理（Nmap-为例）\"><a href=\"#三、基于-TCP-标志位的常见扫描原理（Nmap-为例）\" class=\"headerlink\" title=\"三、基于 TCP 标志位的常见扫描原理（Nmap 为例）\"></a>三、基于 TCP 标志位的常见扫描原理（Nmap 为例）</h4><p>扫描的核心是发送特定标志位的 TCP 包，通过接收端的响应推断端口状态（开放 &#x2F; 关闭 &#x2F; 过滤），以下是典型场景：</p>\n<ol>\n<li>全连接扫描（-sT）：模拟正常连接<br>发包逻辑：完成完整三次握手。<br>扫描端 → 目标端口：SYN 包（标志位：SYN&#x3D;1）；<br>目标端口开放 → 扫描端：SYN+ACK 包（SYN&#x3D;1，ACK&#x3D;1）；<br>扫描端 → 目标端口：ACK 包（ACK&#x3D;1），建立连接后主动发送FIN 包关闭。<br>响应判断：<br>收到 SYN+ACK → 端口开放；<br>收到 RST 包 → 端口关闭；<br>无响应 → 可能被防火墙过滤。</li>\n<li>SYN 半开放扫描（-sS）：隐蔽扫描<br>发包逻辑：不完成三次握手，减少日志记录。<br>扫描端 → 目标端口：SYN 包；<br>目标端口开放 → 扫描端：SYN+ACK 包；<br>扫描端 → 目标端口：RST 包（直接断开，不建立连接）。<br>响应判断：同全连接扫描，但目标日志可能不记录完整连接。</li>\n<li>ACK 扫描（-sA）：探测防火墙规则<br>发包逻辑：发送无 SYN 的 ACK 包（仅 ACK&#x3D;1）。<br>响应判断：<br>收到 RST 包 → 防火墙未过滤该端口（目标直接回复 RST）；<br>无响应 → 防火墙过滤了该包（如状态检测防火墙拦截 “无连接上下文的 ACK 包”）。</li>\n<li>FIN 扫描（-sF）：利用操作系统差异<br>发包逻辑：发送仅含 FIN 标志位的包（用于终止连接的标志）。<br>响应判断（依赖操作系统实现）：<br>收到 RST 包 → 端口关闭（多数系统对关闭端口的 FIN 包回复 RST）；<br>无响应 → 端口开放（开放端口通常忽略未建立连接的 FIN 包）或被过滤。</li>\n<li>XMAS 扫描（-sX）与 NULL 扫描（-sN）：异常包探测<br>XMAS 扫描：发送 FIN+PSH+URG 包（标志位全 1，类似 “亮灯”）；<br>NULL 扫描：发送无任何标志位的包（标志位全 0）。<br>响应判断：同 FIN 扫描，但仅对遵循 RFC 标准的系统（如 Linux）有效，Windows 系统可能不按此规则响应（会对 NULL 包回复 RST）。</li>\n</ol>\n<hr>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>TCP 的发包与解包依赖协议栈对首部字段（尤其是标志位、序号）的处理，而扫描本质是通过 “主动发送特定标志位的包” 触发目标的标准化响应，进而推断网络状态。不同扫描类型的核心差异在于标志位组合和是否遵循正常连接流程，隐蔽性（如 SYN 扫描）和准确性（如全连接扫描）各有侧重。</p>\n","feature":true,"text":"什么是TCP协议（Transmission Control Protocol，传输控制协议）是一种面向连接、可靠的传输层协议，其核心是通过 “标志位控制”“序号...","permalink":"/post/TCP协议基础","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"network","slug":"network","count":1,"path":"api/tags/network.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFTCP%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">什么是TCP协议</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EF%BC%88Transmission-Control-Protocol%EF%BC%8C%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE%EF%BC%89%E6%98%AF%E4%B8%80%E7%A7%8D%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E3%80%81%E5%8F%AF%E9%9D%A0%E7%9A%84%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE%EF%BC%8C%E5%85%B6%E6%A0%B8%E5%BF%83%E6%98%AF%E9%80%9A%E8%BF%87-%E2%80%9C%E6%A0%87%E5%BF%97%E4%BD%8D%E6%8E%A7%E5%88%B6%E2%80%9D%E2%80%9C%E5%BA%8F%E5%8F%B7%E4%B8%8E%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%E2%80%9D-%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%89%E5%BA%8F%E3%80%81%E6%97%A0%E5%B7%AE%E9%94%99%E4%BC%A0%E8%BE%93%E3%80%82%E4%BB%A5%E4%B8%8B%E4%BB%8E-%E2%80%9CTCP-%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84%E2%80%9D%E2%80%9C%E5%8F%91%E5%8C%85%E4%B8%8E%E8%A7%A3%E5%8C%85%E8%BF%87%E7%A8%8B%E2%80%9D%E2%80%9C%E5%9F%BA%E4%BA%8E-TCP-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86%E2%80%9D-%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E5%B1%95%E5%BC%80%E8%AF%B4%E6%98%8E%EF%BC%9A\"><span class=\"toc-text\">（Transmission Control Protocol，传输控制协议）是一种面向连接、可靠的传输层协议，其核心是通过 “标志位控制”“序号与确认机制” 实现数据的有序、无差错传输。以下从 “TCP 协议基础结构”“发包与解包过程”“基于 TCP 的常见扫描原理” 三个维度展开说明：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81TCP-%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%EF%BC%9A%E9%A6%96%E9%83%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E6%A0%B8%E5%BF%83%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">一、TCP 协议基础：首部结构与核心字段</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81TCP-%E7%9A%84%E5%8F%91%E5%8C%85%E4%B8%8E%E8%A7%A3%E5%8C%85%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">二、TCP 的发包与解包过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%9F%BA%E4%BA%8E-TCP-%E6%A0%87%E5%BF%97%E4%BD%8D%E7%9A%84%E5%B8%B8%E8%A7%81%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86%EF%BC%88Nmap-%E4%B8%BA%E4%BE%8B%EF%BC%89\"><span class=\"toc-text\">三、基于 TCP 标志位的常见扫描原理（Nmap 为例）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"Wclxd","slug":"blog-author","avatar":"/image/logo.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"fab fa-github","link":"https://github.com/lixingdao"},"email":{"icon":"fas fa-envelope","link":"mailto:3107878660@qq.com"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用Nmap对防火墙和IDS/IPS 规避","uid":"a03a11a291d2e8cc2f6b77138205211d","slug":"使用Nmap对防火墙和IDS/IPS 规避","date":"2025-10-16T09:47:31.000Z","updated":"2025-10-17T16:27:45.368Z","comments":true,"path":"api/articles/使用Nmap对防火墙和IDS/IPS 规避.json","keywords":["Wclxd","blog","personal"],"cover":null,"text":"防火墙防火墙是一种防止外部网络进行未经授权连接尝试的安全措施。每个防火墙安全系统都基于一个软件组件，该组件监控防火墙与传入数据连接之间的网络流量，并根据已设置的...","permalink":"/post/使用Nmap对防火墙和IDS/IPS 规避","photos":[],"count_time":{"symbolsCount":265,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"tools","slug":"tools","count":1,"path":"api/tags/tools.json"}],"author":{"name":"Wclxd","slug":"blog-author","avatar":"/image/logo.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"fab fa-github","link":"https://github.com/lixingdao"},"email":{"icon":"fas fa-envelope","link":"mailto:3107878660@qq.com"}}}},"feature":true},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2025-10-11T10:02:05.026Z","updated":"2025-10-11T10:02:05.026Z","comments":true,"path":"api/articles/hello-world.json","keywords":["Wclxd","blog","personal"],"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":444,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Wclxd","slug":"blog-author","avatar":"/image/logo.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"fab fa-github","link":"https://github.com/lixingdao"},"email":{"icon":"fas fa-envelope","link":"mailto:3107878660@qq.com"}}}},"feature":true}}